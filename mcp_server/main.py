# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T02:02:04+00:00



import argparse
import json
import os
from typing import *
from typing import Optional

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity, UnsuportedSecurityStub
from fastapi import Path, Query
from pydantic import conint

from models import (
    Alt,
    ConversionList,
    FieldXgafv,
    IdMappingFile,
    Report,
    ReportRequest,
    SavedColumnList,
    UpdateAvailabilityRequest,
    UpdateAvailabilityResponse,
)

app = MCPProxy(
    contact={'name': 'Google', 'url': 'https://google.com', 'x-twitter': 'youtube'},
    description='The Search Ads 360 API allows developers to automate uploading conversions and downloading reports from Search Ads 360.',
    license={
        'name': 'Creative Commons Attribution 3.0',
        'url': 'http://creativecommons.org/licenses/by/3.0/',
    },
    termsOfService='https://developers.google.com/terms/',
    title='Search Ads 360 API',
    version='v2',
    servers=[{'url': 'https://doubleclicksearch.googleapis.com/'}],
)


@app.get(
    '/doubleclicksearch/v2/agency/{agencyId}/advertiser/{advertiserId}/engine/{engineAccountId}/conversion',
    description=""" Retrieves a list of conversions from a DoubleClick Search engine account. """,
    tags=['report_generation'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def doubleclicksearch_conversion_get(
    agency_id: str = Path(..., alias='agencyId'),
    advertiser_id: str = Path(..., alias='advertiserId'),
    engine_account_id: str = Path(..., alias='engineAccountId'),
    end_date: conint(ge=20091101, le=99991231) = Query(..., alias='endDate'),
    row_count: conint(ge=1, le=1000) = Query(..., alias='rowCount'),
    start_date: conint(ge=20091101, le=99991231) = Query(..., alias='startDate'),
    start_row: int = Query(..., alias='startRow'),
    ad_group_id: Optional[str] = Query(None, alias='adGroupId'),
    ad_id: Optional[str] = Query(None, alias='adId'),
    campaign_id: Optional[str] = Query(None, alias='campaignId'),
    criterion_id: Optional[str] = Query(None, alias='criterionId'),
    customer_id: Optional[str] = Query(None, alias='customerId'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/doubleclicksearch/v2/agency/{agencyId}/advertiser/{advertiserId}/idmapping',
    description=""" Downloads a csv file(encoded in UTF-8) that contains ID mappings between legacy SA360 and new SA360. The file includes all children entities of the given advertiser(e.g. engine accounts, campaigns, ad groups, etc.) that exist in both legacy SA360 and new SA360. """,
    tags=['conversion_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def doubleclicksearch_reports_get_id_mapping_file(
    agency_id: str = Path(..., alias='agencyId'),
    advertiser_id: str = Path(..., alias='advertiserId'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/doubleclicksearch/v2/agency/{agencyId}/advertiser/{advertiserId}/savedcolumns',
    description=""" Retrieve the list of saved columns for a specified advertiser. """,
    tags=['conversion_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def doubleclicksearch_saved_columns_list(
    agency_id: str = Path(..., alias='agencyId'),
    advertiser_id: str = Path(..., alias='advertiserId'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/doubleclicksearch/v2/conversion',
    description=""" Inserts a batch of new conversions into DoubleClick Search. """,
    tags=['conversion_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def doubleclicksearch_conversion_insert(
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    body: ConversionList = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/doubleclicksearch/v2/conversion',
    description=""" Updates a batch of conversions in DoubleClick Search. """,
    tags=['conversion_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def doubleclicksearch_conversion_update(
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    body: ConversionList = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/doubleclicksearch/v2/conversion/updateAvailability',
    description=""" Updates the availabilities of a batch of floodlight activities in DoubleClick Search. """,
    tags=['conversion_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def doubleclicksearch_conversion_update_availability(
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    body: UpdateAvailabilityRequest = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/doubleclicksearch/v2/customer/{customerId}/conversion',
    description=""" Retrieves a list of conversions from a DoubleClick Search engine account. """,
    tags=['report_generation'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def doubleclicksearch_conversion_get_by_customer_id(
    customer_id: str = Path(..., alias='customerId'),
    end_date: conint(ge=20091101, le=99991231) = Query(..., alias='endDate'),
    row_count: conint(ge=1, le=1000) = Query(..., alias='rowCount'),
    start_date: conint(ge=20091101, le=99991231) = Query(..., alias='startDate'),
    start_row: int = Query(..., alias='startRow'),
    ad_group_id: Optional[str] = Query(None, alias='adGroupId'),
    ad_id: Optional[str] = Query(None, alias='adId'),
    advertiser_id: Optional[str] = Query(None, alias='advertiserId'),
    agency_id: Optional[str] = Query(None, alias='agencyId'),
    campaign_id: Optional[str] = Query(None, alias='campaignId'),
    criterion_id: Optional[str] = Query(None, alias='criterionId'),
    engine_account_id: Optional[str] = Query(None, alias='engineAccountId'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/doubleclicksearch/v2/reports',
    description=""" Inserts a report request into the reporting system. """,
    tags=['report_generation'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def doubleclicksearch_reports_request(
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    body: ReportRequest = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/doubleclicksearch/v2/reports/generate',
    description=""" Generates and returns a report immediately. """,
    tags=['report_generation'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def doubleclicksearch_reports_generate(
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    body: ReportRequest = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/doubleclicksearch/v2/reports/{reportId}',
    description=""" Polls for the status of a report request. """,
    tags=['report_generation'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def doubleclicksearch_reports_get(
    report_id: str = Path(..., alias='reportId'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/doubleclicksearch/v2/reports/{reportId}/files/{reportFragment}',
    description=""" Downloads a report file encoded in UTF-8. """,
    tags=['report_generation'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def doubleclicksearch_reports_get_file(
    report_id: str = Path(..., alias='reportId'),
    report_fragment: conint(ge=0) = Path(..., alias='reportFragment'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
